(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/roads_rivers_and_residences.js":
/*!*********************************************!*\
  !*** ../pkg/roads_rivers_and_residences.js ***!
  \*********************************************/
/*! exports provided: __wbg_time_6a0030787cc2611f, __wbg_timeEnd_b4f596db9af4892a, __wbg_random_86efc8986c8a8805, Universe, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_time_6a0030787cc2611f\", function() { return __wbg_time_6a0030787cc2611f; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_timeEnd_b4f596db9af4892a\", function() { return __wbg_timeEnd_b4f596db9af4892a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_86efc8986c8a8805\", function() { return __wbg_random_86efc8986c8a8805; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./roads_rivers_and_residences_bg */ \"../pkg/roads_rivers_and_residences_bg.wasm\");\n/* tslint:disable */\n\n\nconst __wbg_time_6a0030787cc2611f_target = console.time;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_time_6a0030787cc2611f(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    __wbg_time_6a0030787cc2611f_target(varg0);\n}\n\nconst __wbg_timeEnd_b4f596db9af4892a_target = console.timeEnd;\n\nfunction __wbg_timeEnd_b4f596db9af4892a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    __wbg_timeEnd_b4f596db9af4892a_target(varg0);\n}\n\nconst __wbg_random_86efc8986c8a8805_target = Math.random.bind(Math) || function() {\n    throw new Error(`wasm-bindgen: Math.random.bind(Math) does not exist`);\n};\n\nfunction __wbg_random_86efc8986c8a8805() {\n    return __wbg_random_86efc8986c8a8805_target();\n}\n\nfunction freeUniverse(ptr) {\n\n    _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    nr_of_births() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_nr_of_births\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    nr_of_deaths() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_nr_of_deaths\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_cells\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    births() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_births\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    deaths() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_deaths\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    update_changes() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_update_changes\"](this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    toggle_cell(arg0, arg1) {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_toggle_cell\"](this.ptr, arg0, arg1);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    glider(arg0, arg1) {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_glider\"](this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {boolean} arg2\n    * @returns {Universe}\n    */\n    static new(arg0, arg1, arg2) {\n        return Universe.__wrap(_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"](arg0, arg1, arg2 ? 1 : 0));\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///../pkg/roads_rivers_and_residences.js?");

/***/ }),

/***/ "../pkg/roads_rivers_and_residences_bg.wasm":
/*!**************************************************!*\
  !*** ../pkg/roads_rivers_and_residences_bg.wasm ***!
  \**************************************************/
/*! exports provided: memory, __indirect_function_table, __heap_base, __data_end, __wbg_universe_free, universe_width, universe_height, universe_nr_of_births, universe_nr_of_deaths, universe_cells, universe_births, universe_deaths, universe_update_changes, universe_toggle_cell, universe_glider, universe_tick, universe_new */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./roads_rivers_and_residences */ \"../pkg/roads_rivers_and_residences.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/roads_rivers_and_residences_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var roads_rivers_and_residences_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! roads-rivers-and-residences/roads_rivers_and_residences_bg */ \"../pkg/roads_rivers_and_residences_bg.wasm\");\n/* harmony import */ var roads_rivers_and_residences__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! roads-rivers-and-residences */ \"../pkg/roads_rivers_and_residences.js\");\n\n\n\nlet cellSize = 5; // px\nconst GRID_COLOR = \"#000000\";\nconst DEAD_COLOR = \"#FFFF00\";\nconst ALIVE_COLOR = \"#FF0000\";\n\n// Construct the universe, and get its width and height.\nlet universe = null;\nlet width = 260;\nlet height = 140;\n\n// Give the canvas room for all of our cells and a 1px border\n// around each of them.\nconst canvas = document.getElementById(\"game-of-life-canvas\");\nconst playPauseButton = document.getElementById(\"play-pause\");\nconst speedSlider = document.getElementById(\"speed-slider\");\nconst widthSlider = document.getElementById(\"width-slider\");\nconst heightSlider = document.getElementById(\"height-slider\");\nconst zoomSlider = document.getElementById(\"zoom-slider\");\nconst stepCounter = document.getElementById(\"step-counter\");\nconst resetButton = document.getElementById(\"reset-button\");\nconst stopButton = document.getElementById(\"stop-button\");\n\nconst ctx = canvas.getContext('2d');\nlet animationId = null;\nlet ticks = 1;\nlet totalSteps = 0;\n\nconst getIndex = (row, column) => {\n    return row * width + column;\n};\n\nconst isPaused = () => {\n    return animationId === null;\n};\n\nconst isBitSet = (number, bitPosition) => {\n    return (number & (1 << bitPosition)) !== 0;\n};\n\nconst drawAllCells = () => {\n    const cellsPtr = universe.cells();\n    const cells = new Uint32Array(roads_rivers_and_residences_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, cellsPtr, Math.ceil((width * height) / 32));\n\n    ctx.beginPath();\n\n    ctx.fillStyle = ALIVE_COLOR;\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const idx = getIndex(row, col);\n            const number = cells[Math.floor(idx / 32)];\n            const bitPosition = idx % 32;\n            if (!isBitSet(number, bitPosition)) {\n                continue;\n            }\n            ctx.fillRect(\n                col * (cellSize + 1) + 1,\n                row * (cellSize + 1) + 1,\n                cellSize,\n                cellSize\n            );\n        }\n    }\n\n    ctx.fillStyle = DEAD_COLOR;\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const idx = getIndex(row, col);\n            const number = cells[Math.floor(idx / 32)];\n            const bitPosition = idx % 32;\n            if (isBitSet(number, bitPosition)) {\n                continue;\n            }\n            ctx.fillRect(\n                col * (cellSize + 1) + 1,\n                row * (cellSize + 1) + 1,\n                cellSize,\n                cellSize\n            );\n        }\n    }\n\n    ctx.stroke();\n};\n\nconst drawChangedCells = () => {\n    universe.update_changes();\n    const birthsPtr = universe.births();\n    const births = new Uint32Array(roads_rivers_and_residences_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, birthsPtr, universe.nr_of_births());\n\n    ctx.beginPath();\n\n    ctx.fillStyle = ALIVE_COLOR;\n    births.forEach(\n        idx => {\n            const row = Math.floor(idx/width);\n            const col = idx % width;\n            ctx.fillRect(\n                col * (cellSize + 1) + 1,\n                row * (cellSize + 1) + 1,\n                cellSize,\n                cellSize\n            );\n        }\n    )\n\n    const deathsPtr = universe.deaths();\n    const deaths = new Uint32Array(roads_rivers_and_residences_roads_rivers_and_residences_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, deathsPtr, universe.nr_of_deaths());\n\n    ctx.fillStyle = DEAD_COLOR;\n    deaths.forEach(\n        idx => {\n            const row = Math.floor(idx/width);\n            const col = idx % width;\n            ctx.fillRect(\n                col * (cellSize + 1) + 1,\n                row * (cellSize + 1) + 1,\n                cellSize,\n                cellSize\n            );\n        }\n    )\n\n    ctx.stroke();\n};\n\nconst drawGrid = () => {\n    ctx.beginPath();\n    ctx.strokeStyle = GRID_COLOR;\n\n    // Vertical lines.\n    for (let i = 0; i <= width; i++) {\n        ctx.moveTo(i * (cellSize + 1) + 1, 0);\n        ctx.lineTo(i * (cellSize + 1) + 1, (cellSize + 1) * height + 1);\n    }\n\n    // Horizontal lines.\n    for (let j = 0; j <= height; j++) {\n        ctx.moveTo(0, j * (cellSize + 1) + 1);\n        ctx.lineTo((cellSize + 1) * width + 1, j * (cellSize + 1) + 1);\n    }\n\n    ctx.stroke();\n};\n\nconst renderLoop = () => {\n    for (let i = 0; i < ticks; i++) {\n        universe.tick();\n        totalSteps++;\n    }\n    drawChangedCells();\n    stepCounter.textContent = totalSteps;\n    animationId = requestAnimationFrame(renderLoop);\n};\n\nconst play = () => {\n    playPauseButton.textContent = \"⏸\";\n    if (universe === null) {\n        reset(true);\n    }\n    renderLoop();\n};\n\nconst pause = () => {\n    playPauseButton.textContent = \"▶️\";\n    cancelAnimationFrame(animationId);\n    animationId = null;\n};\n\nplayPauseButton.addEventListener(\"click\", event => {\n    if (isPaused()) {\n        play();\n    } else {\n        pause();\n    }\n});\n\nconst reset = (random) => {\n    universe = roads_rivers_and_residences__WEBPACK_IMPORTED_MODULE_1__[\"Universe\"].new(width, height, random);\n    canvas.height = (cellSize + 1) * height + 1;\n    canvas.width = (cellSize + 1) * width + 1;\n    totalSteps = 0;\n    stepCounter.textContent = totalSteps;\n    drawGrid();\n    drawAllCells();\n    universe.update_changes();\n};\n\ncanvas.addEventListener(\"click\", event => {\n    const boundingRect = canvas.getBoundingClientRect();\n\n    const scaleX = canvas.width / boundingRect.width;\n    const scaleY = canvas.height / boundingRect.height;\n\n    const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n    const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n    const row = Math.min(Math.floor(canvasTop / (cellSize + 1)), height - 1);\n    const col = Math.min(Math.floor(canvasLeft / (cellSize + 1)), width - 1);\n    if (event.metaKey) {\n        universe.glider(row, col);\n    } else {\n        universe.toggle_cell(row, col);\n    }\n    drawChangedCells();\n});\n\nspeedSlider.addEventListener(\"change\", event => {\n    ticks = speedSlider.value;\n});\n\nwidthSlider.addEventListener(\"change\", event => {\n    width = parseInt(widthSlider.value);\n    reset(true);\n});\n\nheightSlider.addEventListener(\"change\", event => {\n    height = parseInt(heightSlider.value);\n    reset(true)\n});\n\nzoomSlider.addEventListener(\"change\", event => {\n    cellSize = parseInt(zoomSlider.value);\n    canvas.height = (cellSize + 1) * height + 1;\n    canvas.width = (cellSize + 1) * width + 1;\n    drawGrid();\n    drawAllCells();\n});\n\nresetButton.addEventListener(\"click\", event => {\n    reset(true);\n});\n\nstopButton.addEventListener(\"click\", event => {\n    pause();\n    reset(false);\n    drawAllCells();\n});\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);